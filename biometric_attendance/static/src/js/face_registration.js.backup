class FaceRegistrationApp {
    constructor() {
        this.video = null;
        this.canvas = null;
        this.stream = null;
        this.modelsLoaded = false;
        this.isCapturing = false;
        this.capturedSamples = [];
        this.requiredSamples = 5;
        
        this.init();
    }
    
    async init() {
        try {
            await this.loadFaceApiModels();
            this.initializeInterface();
            this.setupEventListeners();
        } catch (error) {
            console.error('Error inicializando registro:', error);
        }
    }
    
    async loadFaceApiModels() {
        const MODEL_URL = '/biometric_attendance/static/models';
        
        await Promise.all([
            faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),
            faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),
            faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL)
        ]);
        
        this.modelsLoaded = true;
    }
    
    initializeInterface() {
        const container = document.getElementById('registration_app');
        container.innerHTML = `
            <div class="registration_steps">
                <div class="step active" id="step1">
                    <h3>Paso 1: Preparación</h3>
                    <div class="instructions">
                        <ul>
                            <li>Asegúrese de tener buena iluminación</li>
                            <li>Retire lentes oscuros o mascarillas</li>
                            <li>Mantenga el rostro centrado</li>
                        </ul>
                        <button id="start_registration" class="btn btn-primary">
                            <i class="fas fa-camera"></i> Iniciar Registro
                        </button>
                    </div>
                </div>
                
                <div class="step" id="step2" style="display: none;">
                    <h3>Paso 2: Captura de Muestras</h3>
                    <div class="capture_area">
                        <video id="reg_video" autoplay></video>
                        <canvas id="reg_canvas" style="display: none;"></canvas>
                        <div class="capture_overlay">
                            <div class="face_guide"></div>
                        </div>
                    </div>
                    <div class="capture_progress">
                        <div class="progress_bar">
                            <div class="progress_fill" id="progress_fill"></div>
                        </div>
                        <p>Muestras capturadas: <span id="sample_count">0</span>/${this.requiredSamples}</p>
                        <button id="capture_sample" class="btn btn-success" disabled>
                            <i class="fas fa-camera"></i> Capturar Muestra
                        </button>
                    </div>
                </div>
                
                <div class="step" id="step3" style="display: none;">
                    <h3>Paso 3: Procesamiento</h3>
                    <div class="processing_status">
                        <div class="spinner"></div>
                        <p>Procesando muestras faciales...</p>
                    </div>
                </div>
                
                <div class="step" id="step4" style="display: none;">
                    <h3>¡Registro Completado!</h3>
                    <div class="success_message">
                        <i class="fas fa-check-circle fa-3x"></i>
                        <p>Su rostro ha sido registrado exitosamente en el sistema.</p>
                        <button onclick="window.close()" class="btn btn-primary">
                            Cerrar Ventana
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
    
    setupEventListeners() {
        document.getElementById('start_registration').addEventListener('click', () => this.startCapture());
    }
    
    async startCapture() {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({
                video: { width: 640, height: 480, facingMode: 'user' },
                audio: false
            });
            
            this.video = document.getElementById('reg_video');
            this.canvas = document.getElementById('reg_canvas');
            
            this.video.srcObject = this.stream;
            await this.video.play();
            
            this.showStep(2);
            this.startFaceDetection();
            
        } catch (error) {
            console.error('Error accediendo a cámara:', error);
            alert('Error al acceder a la cámara');
        }
    }
    
    startFaceDetection() {
        const captureBtn = document.getElementById('capture_sample');
        
        const detectLoop = async () => {
            if (!this.video || this.video.readyState !== 4) {
                requestAnimationFrame(detectLoop);
                return;
            }
            
            try {
                const detection = await faceapi
                    .detectSingleFace(this.video, new faceapi.TinyFaceDetectorOptions())
                    .withFaceLandmarks()
                    .withFaceDescriptor();
                
                if (detection) {
                    captureBtn.disabled = false;
                    captureBtn.onclick = () => this.captureSample(detection);
                } else {
                    captureBtn.disabled = true;
                }
                
            } catch (error) {
                console.error('Error en detección:', error);
            }
            
            if (this.capturedSamples.length < this.requiredSamples) {
                requestAnimationFrame(detectLoop);
            }
        };
        
        detectLoop();
    }
    
    async captureSample(detection) {
        if (this.isCapturing || this.capturedSamples.length >= this.requiredSamples) return;
        
        this.isCapturing = true;
        
        // Capturar descriptor facial
        const descriptor = Array.from(detection.descriptor);
        this.capturedSamples.push(descriptor);
        
        // Actualizar UI
        const count = this.capturedSamples.length;
        document.getElementById('sample_count').textContent = count;
        document.getElementById('progress_fill').style.width = `${(count / this.requiredSamples) * 100}%`;
        
        // Si completamos todas las muestras, procesar
        if (count >= this.requiredSamples) {
            await this.processRegistration();
        }
        
        // Delay para evitar capturas duplicadas
        setTimeout(() => {
            this.isCapturing = false;
        }, 1000);
    }
    
    async processRegistration() {
        this.showStep(3);
        
        try {
            // Calcular descriptor promedio
            const avgDescriptor = this.calculateAverageDescriptor(this.capturedSamples);
            
            // Capturar foto de referencia
            this.canvas.getContext('2d').drawImage(this.video, 0, 0);
            const photoData = this.canvas.toDataURL('image/jpeg', 0.8);
            
            // Enviar al servidor
            const employeeId = new URLSearchParams(window.location.search).get('employee_id');
            const result = await this.registerWithServer(employeeId, avgDescriptor, photoData);
            
            if (result.success) {
                this.showStep(4);
            } else {
                throw new Error(result.message || 'Error en el registro');
            }
            
        } catch (error) {
            console.error('Error procesando registro:', error);
            alert('Error procesando el registro: ' + error.message);
        }
    }
    
    calculateAverageDescriptor(samples) {
        const avgDescriptor = new Array(128).fill(0);
        
        samples.forEach(sample => {
            sample.forEach((value, index) => {
                avgDescriptor[index] += value;
            });
        });
        
        return avgDescriptor.map(value => value / samples.length);
    }
    
    async registerWithServer(employeeId, faceData, photoData) {
        const response = await fetch('/kiosk/api/register_face', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: '2.0',
                method: 'call',
                params: {
                    employee_id: parseInt(employeeId),
                    face_data: faceData,
                    photo_data: photoData
                }
            })
        });
        
        const data = await response.json();
        return data.result || data;
    }
    
    showStep(stepNumber) {
        // Ocultar todos los pasos
        for (let i = 1; i <= 4; i++) {
            const step = document.getElementById(`step${i}`);
            if (step) {
                step.style.display = 'none';
                step.classList.remove('active');
            }
        }
        
        // Mostrar paso actual
        const currentStep = document.getElementById(`step${stepNumber}`);
        if (currentStep) {
            currentStep.style.display = 'block';
            currentStep.classList.add('active');
        }
    }
}

// Inicializar aplicación cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    if (document.getElementById('kiosk_app')) {
        // Kiosco principal
        window.kioskApp = new BiometricKioskApp();
    } else if (document.getElementById('registration_app')) {
        // Registro facial
        window.registrationApp = new FaceRegistrationApp();
    }
});

// Prevenir cierre accidental en modo kiosco
window.addEventListener('beforeunload', function(e) {
    if (window.kioskApp && window.kioskApp.stream) {
        e.preventDefault();
        e.returnValue = '¿Está seguro que desea salir del kiosco?';
        return e.returnValue;
    }
});